      module Skyrme_force
      contains
      real(8) function Skyrme (xy)
      use globals
      implicit none
      real(8) :: xy, Kindens
      integer(8) k
      taun= Kindens(xy, psi(:, 1))
      taup= kindens(xy, psi(:,2))


      do k=1, Nmesh
      kinetic(k) = h2m*(tau_n(k) + tau_p(k))
      Spot(k) = rho(k)*(t0 + (2.d0+alpha)*t3/12.d0*rho**alpha) -  & 
      (rhon(k) + rhop(k))*(t0/2.d0 +t3/12.d0*rho**alpha)-           &
      alpha*rho**(alpha-1.d0)*t3/24.d0*(rhop(k)**2 + rhon(k)**2) 
      enddo

      VSkyrme(:) = kinetic(:)+ Spot(:)

      end function Skyrme


      real(8) function Kindens (xy, ktau)
      use globals
      implicit none
      real(8)  xy
      integer(8) k, ff
      real(8), dimension(:), allocatable :: ktau
      allocate(ktau(0:Nmesh))
      ! mirar quines daquestes variables aniran a lapartat globals i
      ! quines es queden dins de la subrutina

      ! Calculation kinetic density for protons, neutrons and total
      ! TODO: sha de fer el calcul per als orbitals ocupats NOMES, 
      ! llavors fas la suma
      !material necessari: necessito un vector amb els nombres quantics
      !NECESSITO UNA SUBRUTINA QUE EM FACI LA DERIVADA DE LA FUNCIO PSI
      call derivative(psi(:,ipart), dpsi)

      do k=0, Nmesh !loop sobre els punts de la xarxa r
            do ff=1, orbital !loop over orbitals
      ktau(k)=  ktau(k) + (2.d0*quannum(ff,3)+1.d0)/4.d0/pi/xy**2 &
      *((dpsin(k) - psin(k)/xy)**2 + l(l+1.d0)/xy**2*psin(k)**2)

            enddo !loop over orbitals
      enddo ! loop over r
      return
      end function Kindens



      subroutine derivative(array, darray)
      use globals
      implicit none

      real(8) ::  array(0:Nmesh), darray(0:Nmesh)
      integer(8) :: dime, i
            
      darray(0) = 0.d0 
      do i=1, Nmesh-2
      darray(i)= (2.d0*array(i+1) - 3.d0*array(i)/2.d0 - array(i+2)/2)/(2.d0*h)      
      enddo
      darray(Nmesh-1) = 0.d0
      darray(Nmesh) =0.d0

      return      
      end subroutine



      end module Skyrme_force
